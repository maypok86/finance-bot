name: Release

on:
  push:
    branches:
      - release

env:
  REGISTRY: "registry.digitalocean.com/lazybear"
  IMAGE_NAME: "finance-bot"
  CONTAINER_NAME: "finance-bot"

jobs:
  build_and_push:
    name: Build and push
    runs-on: ubuntu-latest

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build container image
        run: TAG=$(echo $GITHUB_SHA | head -c7) docker-compose -f deployments/docker-compose.yml build

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Package project
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -cvf deploy.tar ../build/

      - name: Copy project via scp
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSHKEY }}
        with:
          source: "deploy.tar"
          target: "~/projects"

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          ACCESS_ID: ${{ secrets.ACCESS_ID }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,BOT_TOKEN,ACCESS_ID,DB_PASSWORD,DB_USER,DIGITALOCEAN_ACCESS_TOKEN
          script: |
            # Stop running container
            docker stop $(echo $CONTAINER_NAME) || true
            # Remove old container
            docker rm $(echo $CONTAINER_NAME) || true

            # Set env variables
            export IMAGE_NAME=$IMAGE_NAME
            export REGISTRY=$REGISTRY
            export CONTAINER_NAME=$CONTAINER_NAME
            export GITHUB_SHA=$GITHUB_SHA
            export BOT_TOKEN=$BOT_TOKEN
            export ACCESS_ID=$ACCESS_ID
            export DB_PASSWORD=$DB_PASSWORD
            export DB_USER=$DB_USER
            export DIGITALOCEAN_ACCESS_TOKEN=$DIGITALOCEAN_ACCESS_TOKEN
            export TAG=$(echo $GITHUB_SHA | head -c7)

            # Untar project
            cd ~/projects
            tar -xvf deploy.tar
            rm -rf deploy.tar
            rm -rf finance-bot
            mv build finance-bot
            cd finance-bot

            # Login into Digital Ocean Registry
            docker login -u $(echo $DIGITALOCEAN_ACCESS_TOKEN) -p $(echo $DIGITALOCEAN_ACCESS_TOKEN) $(echo $REGISTRY)
            # Pull project image
            docker pull $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $TAG)
            # Run a new container from a new image
            docker-compose -f deployments/docker-compose.yml up -d
