// Code generated by MockGen. DO NOT EDIT.
// Source: budget.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBudget is a mock of Budget interface.
type MockBudget struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetMockRecorder
}

// MockBudgetMockRecorder is the mock recorder for MockBudget.
type MockBudgetMockRecorder struct {
	mock *MockBudget
}

// NewMockBudget creates a new mock instance.
func NewMockBudget(ctrl *gomock.Controller) *MockBudget {
	mock := &MockBudget{ctrl: ctrl}
	mock.recorder = &MockBudgetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudget) EXPECT() *MockBudgetMockRecorder {
	return m.recorder
}

// GetBaseDailyLimit mocks base method.
func (m *MockBudget) GetBaseDailyLimit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseDailyLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetBaseDailyLimit indicates an expected call of GetBaseDailyLimit.
func (mr *MockBudgetMockRecorder) GetBaseDailyLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseDailyLimit", reflect.TypeOf((*MockBudget)(nil).GetBaseDailyLimit))
}

// GetDailyLimitByName mocks base method.
func (m *MockBudget) GetDailyLimitByName(name string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyLimitByName", name)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDailyLimitByName indicates an expected call of GetDailyLimitByName.
func (mr *MockBudgetMockRecorder) GetDailyLimitByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyLimitByName", reflect.TypeOf((*MockBudget)(nil).GetDailyLimitByName), name)
}
