// Code generated by MockGen. DO NOT EDIT.
// Source: expense.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/maypok86/finance-bot/internal/model"
	times "github.com/maypok86/finance-bot/pkg/times"
)

// MockExpense is a mock of Expense interface.
type MockExpense struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseMockRecorder
}

// MockExpenseMockRecorder is the mock recorder for MockExpense.
type MockExpenseMockRecorder struct {
	mock *MockExpense
}

// NewMockExpense creates a new mock instance.
func NewMockExpense(ctrl *gomock.Controller) *MockExpense {
	mock := &MockExpense{ctrl: ctrl}
	mock.recorder = &MockExpenseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpense) EXPECT() *MockExpenseMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockExpense) CreateExpense(ctx context.Context, expense *model.Expense) (*model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", ctx, expense)
	ret0, _ := ret[0].(*model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockExpenseMockRecorder) CreateExpense(ctx, expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockExpense)(nil).CreateExpense), ctx, expense)
}

// DeleteExpenseByID mocks base method.
func (m *MockExpense) DeleteExpenseByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpenseByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpenseByID indicates an expected call of DeleteExpenseByID.
func (mr *MockExpenseMockRecorder) DeleteExpenseByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpenseByID", reflect.TypeOf((*MockExpense)(nil).DeleteExpenseByID), ctx, id)
}

// GetAllExpensesByPeriod mocks base method.
func (m *MockExpense) GetAllExpensesByPeriod(ctx context.Context, period times.Period) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExpensesByPeriod", ctx, period)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExpensesByPeriod indicates an expected call of GetAllExpensesByPeriod.
func (mr *MockExpenseMockRecorder) GetAllExpensesByPeriod(ctx, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExpensesByPeriod", reflect.TypeOf((*MockExpense)(nil).GetAllExpensesByPeriod), ctx, period)
}

// GetBaseExpensesByPeriod mocks base method.
func (m *MockExpense) GetBaseExpensesByPeriod(ctx context.Context, period times.Period) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseExpensesByPeriod", ctx, period)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseExpensesByPeriod indicates an expected call of GetBaseExpensesByPeriod.
func (mr *MockExpenseMockRecorder) GetBaseExpensesByPeriod(ctx, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseExpensesByPeriod", reflect.TypeOf((*MockExpense)(nil).GetBaseExpensesByPeriod), ctx, period)
}

// GetLastExpenses mocks base method.
func (m *MockExpense) GetLastExpenses(ctx context.Context) ([]*model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastExpenses", ctx)
	ret0, _ := ret[0].([]*model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastExpenses indicates an expected call of GetLastExpenses.
func (mr *MockExpenseMockRecorder) GetLastExpenses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastExpenses", reflect.TypeOf((*MockExpense)(nil).GetLastExpenses), ctx)
}
